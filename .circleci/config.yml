#version: 2.1
#
#orbs:
#  android: circleci/android@2.4.0
#
#jobs:
#  build:
#    docker:
#      - image: cimg/android:2024.01-ndk
#    steps:
#      - checkout
#      - restore_cache:
#          key: android-orb-v1-
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#      - save_cache:
#          key: 'android-orb-v1-{{ epoch }}'
#          paths:
#            - ~/.android/build-cache
#            - ~/.android/cache
#      - run:
#          name: Run Build
#          command: ./gradlew build
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - run:
#          name: Run Tests
#          command: ./gradlew lint test
#      - store_test_results:
#          path: app/build/test-results
#      - store_artifacts:
#          path: app/build/outputs/apk/debug/
#          destination: artifact-file

#version: 2.1
#
#orbs:
#  android: circleci/android@2.4.0
#
#jobs:
#  build:
#    docker:
#      - image: cimg/android:2024.01-ndk
#
#    environment:
#      _JAVA_OPTIONS: "-Xmx4g -XX:+UseParallelGC"  # Increase JVM heap size
#
#    steps:
#      - checkout
#
#      - restore_cache:
#          keys:
#            - android-proguard-cache-{{ .Branch }}-{{ checksum "app/proguard-rules.pro" }}
#            - android-proguard-cache-
#
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#
#      - save_cache:
#          paths:
#            - ~/.android/build-cache
#            - ~/.gradle/caches
#            - ~/.gradle/wrapper
#            - app/build/intermediates
#          key: android-proguard-cache-{{ .Branch }}-{{ checksum "app/proguard-rules.pro" }}
#
#      - run:
#          name: Build with ProGuard
#          command: ./gradlew :app:assembleDebug :app:assembleRelease :core:assembleDebug :core:assembleRelease --no-daemon --max-workers=2
#
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#
#      - run:
#          name: Run Tests
#          command: ./gradlew lint test
#
#      - store_test_results:
#          path: app/build/test-results
#
#      - store_artifacts:
#          path: app/build/outputs/apk/debug/
#          destination: artifact-file-debug
#
#      - store_artifacts:
#          path: app/build/outputs/apk/release/
#          destination: artifact-file-release

version: 2.1

orbs:
  android: circleci/android@2.4.0

jobs:
  build:
    docker:
      - image: cimg/android:2024.01-ndk  # Gunakan image Docker dengan SDK dan NDK yang kompatibel
    resource_class: large  # Menyediakan lebih banyak resource untuk build

    environment:
#      _JAVA_OPTIONS: "-Xmx4g -XX:+UseParallelGC"  # Meningkatkan ukuran heap JVM untuk build yang lebih besar
      JDK_VERSIOn: 17

    steps:
      # 1. Checkout source code
      - checkout

      # 2. Restore Cache untuk ProGuard dan dependensi Gradle
      - restore_cache:
          keys:
            - android-proguard-cache-{{ .Branch }}-{{ checksum "app/proguard-rules.pro" }}
            - android-proguard-cache-

      # 3. Ubah hak akses untuk gradlew
      - run:
          name: Chmod permissions
          command: sudo chmod +x ./gradlew

      # 4. Download dependencies dengan Gradle
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies

      # 5. Save Cache untuk Gradle dan build intermediates
      - save_cache:
          paths:
            - ~/.android/build-cache
            - ~/.gradle/caches
            - ~/.gradle/wrapper
            - app/build/intermediates
          key: android-proguard-cache-{{ .Branch }}-{{ checksum "app/proguard-rules.pro" }}

      # 6. Build proyek menggunakan ProGuard
      - run:
          name: Build with ProGuard
          command: ./gradlew :app:assembleDebug :app:assembleRelease :core:assembleDebug :core:assembleRelease --no-daemon --max-workers=2

      # 7. Simpan artifacts build (laporan dan APK debug/release)
      - store_artifacts:
          path: app/build/reports
          destination: reports

      # 8. Jalankan lint dan tes unit
      - run:
          name: Run Tests
          command: ./gradlew lint test

      # 9. Simpan hasil tes
      - store_test_results:
          path: app/build/test-results

      # 10. Simpan APK hasil build (debug)
      - store_artifacts:
          path: app/build/outputs/apk/debug/
          destination: artifact-file-debug

      # 11. Simpan APK hasil build (release)
      - store_artifacts:
          path: app/build/outputs/apk/release/
          destination: artifact-file-release

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
#version: 2.1
#
#orbs:
#  android: circleci/android@0.2.1
#
#jobs:
#  build:
#    docker:
#      - image: cimg/android:2023.09  # Docker image dengan Java 17 dan Android SDK
#    steps:
#      - checkout
#
#      # Restore cache to speed up the build process
#      - restore_cache:
#          key: android-orb-v1-
#
#      # Make gradlew executable
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#
#      # Install dependencies for the project
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#
#      # Save cache for future builds
#      - save_cache:
#          key: 'android-orb-v1-{{ epoch }}'
#          paths:
#            - ~/.android/build-cache
#            - ~/.android/cache
#
#      # Run build with R8 enabled (ensure R8 minification works)
#      - run:
#          name: Run Build
#          command: ./gradlew build --no-daemon
#
#      # Store build reports for inspection
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#
#      # Run tests (lint and unit tests)
#      - run:
#          name: Run Tests
#          command: ./gradlew lint test
#
#      # Store test results for CI visibility
#      - store_test_results:
#          path: app/build/test-results
#
#      # Store the APK output
#      - store_artifacts:
#          path: app/build/outputs/apk/debug/
#          destination: artifact-file
#
#workflows:
#  version: 2
#  build:
#    jobs:
#      - build